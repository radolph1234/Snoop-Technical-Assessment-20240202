from datetime import datetime
import hashlib
import Pandas as pd


def sha2_hash(df: pd.DataFrame,
              column: str) -> pd.DataFrame:
    """
    Generate a SHA-256 hash of the values in a specified DataFrame column

    :param df: DataFrame
    :type df: pd.DataFrame
    :param column: Hashkey column name
    :type column: str
    :return: Dataframe
    :rtype: pd.DataFrame
    """

    df[column] = df[column].apply(lambda x: hashlib.sha256(x.encode()).hexdigest())

    return df


def add_unique_hashkey(df: pd.DataFrame,
                       columns: str) -> pd.DataFrame:
    """
    Adds a unique 'UniqueHashKey' to each row based on the combination of multiple columns.
    The UniqueHashKey is generated by concatenating the values of the inputted columns and 
    then hashing them with SHA-256.

    :param df: dataframe
    :type df: pd.DataFrame
    :param columns: Columns to concatenate for hash
    :type columns: str
    :return: Dataframe
    :rtype: pd.DataFrame
    """

    df['UniqueHashKey'] = df[columns].astype(str).apply(''.join, axis=1)
    df = sha2_hash(df, 'UniqueHashKey')

    return df


def DQ_date(value: str) -> bool:
    """
    To be used as pd.DataFrame.apply()
    Check if a given value is a valid date.

    :param value: Date value
    :type value: str
    :return: True|False
    :rtype: Bool
    """

    format = '%Y-%m-%d' if len(value) == 10 else '%Y-%m-%dT%H:%M:%S'

    try:
        dt = datetime.strptime(value, format)
        
        if dt <= datetime.now():
            return True
        
        return False
    
    except:
        return False


def DQ_currency(value: str) -> bool:
    """
    To be used as pd.DataFrame.apply()
    Check is currency is in valid values: ['EUR', 'GBP', 'USD']. 

    :param value: _description_
    :type value: str
    :return: _description_
    :rtype: bool
    """

    if value in ['EUR', 'GBP', 'USD']:
        return True
    else:
        return False
    

def cast_datetime(df: pd.DataFrame,
                  column: str,
                  format: str) -> pd.DataFrame:
    """
    Cast a pandas DataFrame column to datetime64[ns].

    :param df: DataFrame
    :type df: pd.DataFrame
    :param column: Datetime column to cast
    :type column: str
    :param format: Format of datetime column
    :type format: str
    :return: Dataframe
    :rtype: pd.DataFrame
    """

    df[column] = df[column].apply(lambda x: datetime.strptime(x, format))

    return df

def cast_datetime_str(df: pd.DataFrame,
                      column: str,
                      format: str) -> pd.DataFrame:
    """
    Convert datetime64[ns] to string with given format.

    :param df: Dataframe
    :type df: pd.DataFrame
    :param column: Dataetime column to convert
    :type column: str
    :param format: Datetime format
    :type format: str
    :return: Dataframe
    :rtype: pd.DataFrame
    """

    df[column] = df[column].dt.strftime(format)

    return df


def dense_rank_desc(df: pd.DataFrame,
                    groupby_cols: list,
                    rank_col: str) -> pd.DataFrame:
    """
    Calculate the dense rank in descending order by specified columns.

    :param df: dataframe
    :type df: pd.DataFrame
    :param groupby_cols: Columns to group by
    :type groupby_cols: list
    :param rank_col: Column to rank
    :type rank_col: str
    :return: dataframe
    :rtype: pd.DataFrame
    """

    df['rank'] = (
        df
        .groupby(groupby_cols)[rank_col]
        .rank(method='dense', ascending=False)
    )
    
    return df
